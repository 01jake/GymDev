@* @using DevExpress.Blazor.Internal
@using GymDev.Client.Servicios
@using GymDev.Shared.Data;

@inject NotificacionServicio NotificacionServicio
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<DxCardHeader>
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <h1 class="mb-0">Notificaciones</h1>
            @if (noleidas > 0)
            {
                <p class="ml-2">@($"{noleidas} No leídas")</p>
            }
        </div>
        @if (noleidas > 0)
        {
            <DxButton Text="Marcar todas como leídas"
            RenderStyle="ButtonRenderStyle.Secondary"
            Click="@MarcadasTodasLeidas" />
        }
    </div>
</DxCardHeader>


<div class="cw-480 mb-4">
    <DxTabs ActiveTabIndex="@ActiveTabIndex" ActiveTabIndexChanged="@OnActiveTabIndexChanged">
        <DxTab Text="Todas" TabIconCssClass="tabs-icon-home tabs-icon" />
        <DxTab Text="No Leídas" TabIconCssClass="tabs-icon-products tabs-icon" />
        <DxTab Text="Leídas" TabIconCssClass="tabs-icon-support tabs-icon" />
    </DxTabs>
</div>

<DxPager PageCount="@PageCount"
         @bind-ActivePageIndex="@ActivePageIndex"
         CssClass="mb-3" />

<DxListBox Data="@Paginadas()"
           @bind-Value="@Value"
           ListRenderMode="ListRenderMode.Virtual"
           TData="Notificacion"
           TValue="Notificacion"
           SelectionMode="ListBoxSelectionMode.Multiple"
           TextFieldName="@nameof(Notificacion.Title)"
           CssClass="w-100 h-100 border-0"
           style="max-height: 25rem">
    <ItemDisplayTemplate>
        <Pruebanoti1 DisplayContext="@context.DataItem"
                     Click="Click" />
        @if (!Filtro().Any())
        {
            <p>No hay notificaciones</p>
        }
    </ItemDisplayTemplate>

</DxListBox>


<button class="btn btn-primary" @onclick="Simularnotificacion"> </button>
@code {
    private List<Notificacion> Notificaciones = new();
    Notificacion? Value;
    private const int PageSize = 5;
    private int ActivePageIndex { get; set; } = 0;
    private int ActiveTabIndex = 0;
    private int noleidas => Notificaciones.Count(n => !n.Read);
    private int PageCount => (int)Math.Ceiling((double)Filtro().Count() / PageSize);


    protected override async Task OnInitializedAsync()
    {
        await NotificacionServicio.InicializarAsync();
        Notificaciones = NotificacionServicio.ObtenerTodas().ToList();
    }

    private IEnumerable<Notificacion> Filtro() => ActiveTabIndex switch
    {
        1 => Notificaciones.Where(n => !n.Read),
        2 => Notificaciones.Where(n => n.Read),
        _ => Notificaciones
    };

    private void OnActiveTabIndexChanged(int index)
    {
        ActiveTabIndex = index;
        ActivePageIndex = 0; 
    }
    private IEnumerable<Notificacion> Paginadas()
    {
        var filtradas = Filtro().ToList();
        return filtradas
            .Skip(ActivePageIndex * PageSize)
            .Take(PageSize);
    }

    private void MarcadasTodasLeidas()
    {
        foreach (var notif in Notificaciones)
        {
            notif.Read = true;
        }
    }

    private Task Click(Notificacion notif)
    {
        notif.Read = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void Simularnotificacion()
    {
        var noti = new Notificacion
            {
                Id = 7,
                Title = "Nueva Notificación",
                Body = "Esta es una notificación de prueba.",
                CreateDate = DateTime.Now,
                Read = false
            };

        NotificacionServicio.AgregarNotificacion(noti);
        Notificaciones = NotificacionServicio.ObtenerTodas().ToList();
        StateHasChanged();
    }

}
 *@